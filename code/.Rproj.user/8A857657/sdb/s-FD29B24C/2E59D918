{
    "collab_server" : "",
    "contents" : "## make sure required packages are installed and loaded\nsource(\"requiredPackages.R\")\nsource(\"functions-fitting-data.R\")\n\n############################ LOADING THE DATASET ##################################\n\n## load the ACTIVE dataset. First time it gets loaded from the JSON format and duplicated into an R binary file (way faster to load, less memory consumption)\n## check if the binary exists\nif ( !file.exists(\"../data/active-dataset.dat\")) {\n  print(\"--> Loading the ACTIVE dataset from JSON format... might take a while!\")\n  dataset <- fromJSON(txt = \"../data/active-dataset.json.bz2\", flatten = T)\n  ## save repeating the lengthy loading process, by saving the \"dataset\" data.frame into a R binary file.\n  save(dataset, file = \"../data/active-dataset.dat\", compress = \"bzip2\")\n} else {\n  print(\"--> Loading the ACTIVE dataset from DAT format...\")\n  load(\"../data/active-dataset.dat\")\n}\n\n## let's explore what information we have available for each video\nprint(names(dataset))\n\n## and some samples of videos\nView(head(dataset))\n\n###################### PLOTTING A VIDEO ####################\n\n## let's get the #views and #shares series for a video\nvidID <- which(dataset$YoutubeID == \"bUORBT9iFKc\") # other candidates from the paper: \"WKJoBeeSWhc\", \"bUORBT9iFKc\"\nvidYT <- dataset$YoutubeID[[vidID]]\nviews <- dataset$dailyViewcount[[vidID]]\nshares <- dataset$numShare[[vidID]]\n\n## and plot how this looks like\ndates <- as.Date(dataset$uploadDate[[vidID]]) + 1:length(views) - 1 \nplot(dates, views, type = \"l\", lty = 2, xaxt = \"n\",\n     xlab = \"\", ylab = \"#views\", main = sprintf(\"Popularity and exo series for video '%s'\", dataset$YoutubeID[[vidID]] ))\naxis(1, at=dates[seq(from = 1, to = length(views), by = 14)], cex.axis = 1,\n     labels=dates[seq(from = 1, to = length(views), by = 14)])\n# and now the external influence on another axis\npar(new=TRUE)\ny_limit <- range(shares)\n# scale it down\ny_limit[2] <- y_limit[2] * 3\nplot(x = dates, y = shares, type=\"l\", col=\"red\", ylim = y_limit,\n     xaxt=\"n\", yaxt=\"n\", xlab=\"\", ylab=\"\")\naxis(4, cex.main = 1.5, cex.axis = 1, cex.lab = 1.5, \n     at = round(seq(from = range(shares)[1], to = range(shares)[2], \n                    length.out = 6)) )\nlegend(\"topleft\", legend = c(\"#views\", \"#shares\"), col = c(\"black\", \"red\"), lty = c(2, 1), bty = \"n\")\n\n############################## FITTING THE HIP MODEL ##############################\n\n## We fit the parameters of the HIP model on the first 90 days of video life. Use the extracted #shares during the same period of 1-90 days as external influence.\nfitted_params <- fit_series(data_series = views[1:90], ext_infl = list(shares = shares[1:90]),\n                            lowerBound = c(gamma = 0, eta = 0, K = 0, beta = 0.1, c = -Inf, theta = 0, mu1 = 0),\n                            upperBound = c(gamma = Inf, eta = Inf, K = Inf, beta = 0.1, c = Inf, theta = Inf, mu1 = Inf) )\n\n## print HIP fitted parameters\nprint(fitted_params$model$par)\n\n## based on the fitted parameters, use HIP to generate a fitted series\nfitted_counts <- generate_simulated_data(params = fitted_params$model$par, time = 89, ext_infl = list(shares = shares[1:90]) )$Count\n\n## print the real and the HIP fitted popularity series side-by-side\nprint(rbind(observed = views[1:90], HIP = fitted_counts))\n\n## replot the same thing as above (#views and #shares), but restrict to the first 90 days and add the fitted series on top\n## and plot how this looks like\ndates <- as.Date(dataset$uploadDate[[vidID]]) + 1:length(views) - 1 \nplot(dates[1:90], views[1:90], type = \"l\", lty = 2, xaxt = \"n\",\n     xlab = \"\", ylab = \"#views\", main = sprintf(\"Popularity and exo series for video '%s'\", dataset$YoutubeID[[vidID]] ))\nlines(x = dates[1:90], y = fitted_counts, col = \"blue\", lty = 1)\n\naxis(1, at=dates[seq(from = 1, to = length(views), by = 14)], cex.axis = 1,\n     labels=dates[seq(from = 1, to = length(views), by = 14)])\n# and now the external influence on another axis\npar(new=TRUE)\ny_limit <- range(shares)\n# scale it down\ny_limit[2] <- y_limit[2] * 3\nplot(x = dates[1:90], y = shares[1:90], type=\"l\", col=\"red\", ylim = y_limit,\n     xaxt=\"n\", yaxt=\"n\", xlab=\"\", ylab=\"\")\naxis(4, cex.main = 1.5, cex.axis = 1, cex.lab = 1.5, \n     at = round(seq(from = range(shares)[1], to = range(shares)[2], \n                    length.out = 6)) )\nlegend(\"topleft\", legend = c(\"#views\", \"HIP fit\", \"#shares\"), col = c(\"black\", \"blue\", \"red\"), lty = c(2, 1, 1), bty = \"n\")\n\n################################# FORECAST FUTURE POPULARITY ##########################\n\n## using HIP and its fitted parameters, get the popularity series from 91 days to 120 days\n## note that the generate_simulate_data function counts days from 0, so the 120th day is day 119.\nforecasted_counts <- generate_simulated_data(params = fitted_params$model$par, time = 119, ext_infl = list(shares = shares[1:120]), prefix = views[1:90] )$Count[91:120]\n\n## plot again the previous graph, extending the time horizon to 1-120 days and adding the forecast\ndates <- as.Date(dataset$uploadDate[[vidID]]) + 1:length(views) - 1 \nplot(dates[1:120], views[1:120], type = \"l\", lty = 2, xaxt = \"n\",\n     xlab = \"\", ylab = \"#views\", main = sprintf(\"Popularity and exo series for video '%s'\", dataset$YoutubeID[[vidID]] ))\nlines(x = dates[1:120], y = c(fitted_counts, rep(x = NA, times = 30)), col = \"blue\", lty = 1)\nabline(v = dates[90], col = \"gray60\", lty = 2) ##separate training and forecasting with a vertical line\nlines(x = dates[1:120], y = c(rep(x = NA, times = 90), forecasted_counts), col = \"darkmagenta\", lty = 1)\n\naxis(1, at=dates[seq(from = 1, to = length(views), by = 14)], cex.axis = 1,\n     labels=dates[seq(from = 1, to = length(views), by = 14)])\n# and now the external influence on another axis\npar(new=TRUE)\ny_limit <- range(shares)\n# scale it down\ny_limit[2] <- y_limit[2] * 3\nplot(x = dates[1:90], y = shares[1:90], type=\"l\", col=\"red\", ylim = y_limit,\n     xaxt=\"n\", yaxt=\"n\", xlab=\"\", ylab=\"\")\naxis(4, cex.main = 1.5, cex.axis = 1, cex.lab = 1.5, \n     at = round(seq(from = range(shares)[1], to = range(shares)[2], \n                    length.out = 6)) )\nlegend(\"topleft\", legend = c(\"#views\", \"HIP fit\", \"HIP forecast\", \"#shares\"), col = c(\"black\", \"blue\", \"darkmagenta\", \"red\"), lty = c(2, 1, 1, 1), bty = \"n\")\n",
    "created" : 1490920427090.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2715456906",
    "id" : "2E59D918",
    "lastKnownWriteTime" : 1490930415,
    "last_content_update" : 1490930415808,
    "path" : "~/Work/Articole/Publicatii/2015.03 HIP in WWW/github-code-data-repo/code/demo-fitting-data.R",
    "project_path" : "demo-fitting-data.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}